
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String?
  password         String?
  role             Role              @default(USER)
  emailVerified    DateTime?
  image            String?
  phone            String?
  bio              String?
  location         String?
  organization     String?
  website          String?
  socialLinks      Json?
  permissions      Json?
  isActive         Boolean           @default(true)
  lastLoginAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  eventRequests    EventRequest[]
  events           Event[]
  tickets          Ticket[]
  supportTickets   SupportTicket[]   @relation("UserTickets")
  assignedTickets  SupportTicket[]   @relation("AssignedSupport")
  auditLogs        AuditLog[]
  
  // NextAuth relations
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id                 String         @id @default(cuid())
  name               String
  slug               String         @unique
  description        String
  categoryId         String
  startDate          DateTime
  endDate            DateTime
  startTime          String
  endTime            String
  venueName          String
  venueAddress       String
  city               String
  state              String
  zipCode            String?
  country            String         @default("United States")
  venueType          VenueType
  price              Float
  currency           String         @default("USD")
  capacity           Int
  expectedAttendance String
  isFree             Boolean        @default(false)
  ageRestriction     String?
  isAccessible       Boolean        @default(false)
  hasParking         Boolean        @default(false)
  hasFoodVendors     Boolean        @default(false)
  servesAlcohol      Boolean        @default(false)
  images             String[]
  websiteUrl         String?
  socialMediaLinks   String?
  status             EventStatus @default(DRAFT)
  isPublished        Boolean        @default(false)
  publishedAt        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  organizerId        String
  category           Category       @relation(fields: [categoryId], references: [id])
  organizer          User           @relation(fields: [organizerId], references: [id])
  tickets            Ticket[]

  @@map("events")
}

model EventRequest {
  id                      String        @id @default(cuid())
  organizerName           String
  organizerEmail          String
  organizerPhone          String
  organizationName        String
  organizationWebsite     String?
  organizationDescription String
  eventName            String
  eventDescription     String
  category                String
  startDate               DateTime
  endDate                 DateTime
  startTime               String
  endTime                 String
  venueName               String
  venueAddress            String
  city                    String
  state                   String
  zipCode                 String?
  country                 String        @default("United States")
  venueType               String
  expectedAttendance      String
  ticketPrice             Float?
  isFree                  Boolean       @default(false)
  ageRestriction          String?
  isAccessible            Boolean       @default(false)
  hasParking              Boolean       @default(false)
  hasFoodVendors          Boolean       @default(false)
  servesAlcohol           Boolean       @default(false)
  websiteUrl              String?
  socialMediaLinks        String?
  previousEvents          String?
  marketingPlan           String?
  specialRequirements     String?
  insuranceInfo           String?
  hasPermits              Boolean       @default(false)
  emergencyPlan           String?
  status                  RequestStatus @default(PENDING)
  reviewNotes             String?
  rejectionReason         String?
  reviewedAt              DateTime?
  submittedAt             DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  reviewerId              String?
  reviewer                User?         @relation(fields: [reviewerId], references: [id])

  @@map("event_requests")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  events      Event[]

  @@map("categories")
}

model Ticket {
  id          String       @id @default(cuid())
  ticketId    String       @unique
  qrCode      String       @unique
  buyerName   String
  buyerEmail  String
  buyerPhone  String?
  price       Float
  currency    String       @default("USD")
  status      TicketStatus @default(ACTIVE)
  qrCodeData  String
  isUsed      Boolean      @default(false)
  usedAt      DateTime?
  purchasedAt DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  eventId     String
  buyerId     String?
  buyer       User?        @relation(fields: [buyerId], references: [id])
  event       Event        @relation(fields: [eventId], references: [id])

  @@map("tickets")
}

model EmailLog {
  id        String      @id @default(cuid())
  to        String
  from      String
  subject   String
  template  String?
  status    EmailStatus @default(PENDING)
  error     String?
  sentAt    DateTime?
  createdAt DateTime    @default(now())

  @@map("email_logs")
}

model SupportTicket {
  id          String              @id @default(cuid())
  subject     String
  description String
  priority    SupportPriority     @default(MEDIUM)
  status      SupportTicketStatus @default(OPEN)
  category    String
  userId      String
  assignedTo  String?
  resolution  String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  closedAt    DateTime?
  user        User                @relation("UserTickets", fields: [userId], references: [id])
  assignee    User?               @relation("AssignedSupport", fields: [assignedTo], references: [id])

  @@map("support_tickets")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  changes   Json?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Organization {
  id            String   @id @default(cuid())
  name          String
  description   String?
  website       String?
  phone         String?
  email         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String   @default("United States")
  logo          String?
  socialLinks   Json?
  settings      Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ownerId       String
  members       Json? // Array of user IDs with roles

  @@map("organizations")
}

enum Role {
  USER
  ADMIN
  ORGANIZER
  MODERATOR
  SUPPORT
  SUPER_ADMIN
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum VenueType {
  OUTDOOR
  INDOOR
  MIXED
  VIRTUAL
  HYBRID
}

enum TicketStatus {
  ACTIVE
  CANCELLED
  REFUNDED
  EXPIRED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}
